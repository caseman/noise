from typing import Callable, Collection, Optional, Tuple

class BaseNoise:
    permutation: Tuple[int, ...] = ...
    period: int = ...
    randint_function: Callable[[int, int], int] = ...
    def __init__(self, period: Optional[int] = ..., permutation_table: Optional[Collection[int]] = ...,
                 randint_function: Optional[Callable[[int, int], int]] = ...) -> None: ...
    def randomize(self, period: Optional[int] = ...) -> None: ...

class SimplexNoise(BaseNoise):
    def noise2(self, x: float, y: float) -> float: ...
    def noise3(self, x: float, y: float, z: float) -> float: ...

def lerp(t: float, a: float, b: float) -> float: ...

def grad3(hash: int, x: float, y: float, z: float) -> float: ...

class TileableNoise(BaseNoise):
    def noise3(self, x: float, y: float, z: float, repeat: float, base: float = ...) -> float: ...
